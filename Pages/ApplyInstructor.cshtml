@* Pages/ApplyInstructor.cshtml *@
@page "/apply-instructor"
@model CoursePLatform.Pages.ApplyInstructorModel
@{
    ViewData["Title"] = "Become an Instructor - TongueSpace";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="text-center mb-5">
                <h1 class="display-4 mb-3">Become a TongueSpace Instructor</h1>
                <p class="lead text-muted">Share your language expertise with students worldwide</p>
            </div>

            <!-- Benefits Section -->
            <div class="benefits-section mb-5">
                <div class="row">
                    <div class="col-md-4 text-center mb-4">
                        <div class="benefit-icon mb-3">
                            <i class="bi bi-currency-dollar display-4 text-success"></i>
                        </div>
                        <h5>Earn Money</h5>
                        <p class="text-muted">Set your own course prices and earn from every enrollment</p>
                    </div>
                    <div class="col-md-4 text-center mb-4">
                        <div class="benefit-icon mb-3">
                            <i class="bi bi-people display-4 text-primary"></i>
                        </div>
                        <h5>Global Reach</h5>
                        <p class="text-muted">Teach students from around the world</p>
                    </div>
                    <div class="col-md-4 text-center mb-4">
                        <div class="benefit-icon mb-3">
                            <i class="bi bi-graph-up display-4 text-info"></i>
                        </div>
                        <h5>Flexible Schedule</h5>
                        <p class="text-muted">Create courses on your own timeline</p>
                    </div>
                </div>
            </div>

            <!-- Application Form -->
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="bi bi-file-person me-2"></i>Instructor Application</h4>
                </div>
                <div class="card-body">
                    <div id="loginRequired" class="text-center py-4" style="display: none;">
                        <i class="bi bi-person-lock display-4 text-muted mb-3"></i>
                        <h5>Please Log In</h5>
                        <p class="text-muted">You need to have an account to apply as an instructor.</p>
                        <a href="/Login?returnUrl=/apply-instructor" class="btn btn-primary">Log In</a>
                        <p class="mt-2">Don't have an account? <a href="/Register">Create one here</a></p>
                    </div>

                    <div id="alreadyApplied" class="text-center py-4" style="display: none;">
                        <i class="bi bi-clock-history display-4 text-warning mb-3"></i>
                        <h5>Application Submitted</h5>
                        <p class="text-muted">Your instructor application is under review. We'll contact you soon!</p>
                        <div class="application-status mt-3">
                            <span class="badge bg-warning fs-6" id="statusBadge">Pending Review</span>
                        </div>
                        <div class="mt-3">
                            <p class="text-muted">Applied on: <span id="applicationDate"></span></p>
                        </div>
                    </div>

                    <form id="instructorApplicationForm" style="display: none;">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">First Name *</label>
                                <input type="text" class="form-control" id="firstName" readonly>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Last Name *</label>
                                <input type="text" class="form-control" id="lastName" readonly>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email Address *</label>
                            <input type="email" class="form-control" id="email" readonly>
                        </div>

                        <div class="mb-3">
                            <label for="phoneNumber" class="form-label">Phone Number (WhatsApp preferred)</label>
                            <input type="tel" class="form-control" id="phoneNumber" 
                                   placeholder="+1 234 567 8900" required>
                            <div class="form-text">We'll use this to contact you about your application.</div>
                        </div>

                        <div class="mb-3">
                            <label for="expertise" class="form-label">Language Expertise *</label>
                            <input type="text" class="form-control" id="expertise" 
                                   placeholder="e.g., Native Arabic speaker, Advanced German (C2 level)" 
                                   maxlength="200" required>
                            <div class="form-text">Describe your language skills and certifications</div>
                        </div>

                        <div class="mb-3">
                            <label for="experience" class="form-label">Teaching Experience *</label>
                            <textarea class="form-control" id="experience" rows="4" 
                                      placeholder="Describe your teaching background, certifications, or tutoring experience..." 
                                      maxlength="500" required></textarea>
                            <div class="form-text"><span id="experienceCount">0</span>/500 characters</div>
                        </div>

                        <div class="mb-3">
                            <label for="bio" class="form-label">About You *</label>
                            <textarea class="form-control" id="bio" rows="4" 
                                      placeholder="Tell us about yourself, your background, and what makes you a great instructor..." 
                                      maxlength="500" required></textarea>
                            <div class="form-text"><span id="bioCount">0</span>/500 characters</div>
                        </div>

                        <div class="mb-3">
                            <label for="motivation" class="form-label">Why do you want to teach on TongueSpace? *</label>
                            <textarea class="form-control" id="motivation" rows="3" 
                                      placeholder="What motivates you to teach and help others learn languages?" 
                                      maxlength="300" required></textarea>
                            <div class="form-text"><span id="motivationCount">0</span>/300 characters</div>
                        </div>

                        <div class="mb-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="agreeTerms" required>
                                <label class="form-check-label" for="agreeTerms">
                                    I agree to the <a href="/instructor-terms" target="_blank">Instructor Terms</a> and understand that my application will be reviewed manually.
                                </label>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary btn-lg w-100" id="submitBtn">
                            <span class="spinner-border spinner-border-sm d-none me-2" role="status"></span>
                            Submit Application
                        </button>
                    </form>

                    <div id="loadingSpinner" class="text-center py-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading application form...</p>
                    </div>
                </div>
            </div>

            <!-- What's Next -->
            <div class="card mt-4 border-success">
                <div class="card-body">
                    <h5 class="text-success"><i class="bi bi-info-circle me-2"></i>What happens next?</h5>
                    <ul class="mb-0">
                        <li>We'll review your application within 2-3 business days</li>
                        <li>Our team will contact you via email or WhatsApp</li>
                        <li>If approved, you'll get instructor access to create courses</li>
                        <li>We'll provide onboarding materials to get you started</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.benefit-icon {
    transition: transform 0.3s ease;
}

.benefit-icon:hover {
    transform: scale(1.1);
}

.form-control:read-only {
    background-color: #f8f9fa;
    border-color: #e9ecef;
}

.application-status {
    padding: 1rem;
    border-radius: 8px;
    background: #f8f9fa;
}

.card {
    border-radius: 12px;
}

.card-header {
    border-radius: 12px 12px 0 0 !important;
}

.benefits-section {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 2rem;
    border-radius: 12px;
}
</style>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', async () => {
    await initializeApplicationForm();
});

async function initializeApplicationForm() {
    try {
        // Check authentication status using our API
        const authResponse = await fetch('/api/user/check-auth', { 
            credentials: 'same-origin' 
        });
        
        if (!authResponse.ok || !(await authResponse.json()).isAuthenticated) {
            // Not logged in
            document.getElementById('loadingSpinner').style.display = 'none';
            document.getElementById('loginRequired').style.display = 'block';
            return;
        }

        // Check if user already has an application
        const applicationResponse = await fetch('/api/instructor-application/status', { 
            credentials: 'same-origin' 
        });

        if (applicationResponse.ok) {
            const applicationData = await applicationResponse.json();
            
            if (applicationData.hasApplication) {
                // Show already applied message
                document.getElementById('loadingSpinner').style.display = 'none';
                document.getElementById('alreadyApplied').style.display = 'block';
                
                const statusBadge = document.getElementById('statusBadge');
                const statusColors = {
                    'Pending': 'bg-warning',
                    'UnderReview': 'bg-info', 
                    'Approved': 'bg-success',
                    'Rejected': 'bg-danger'
                };
                
                statusBadge.className = `badge ${statusColors[applicationData.status] || 'bg-secondary'} fs-6`;
                statusBadge.textContent = applicationData.status === 'UnderReview' ? 'Under Review' : applicationData.status;
                
                if (applicationData.applicationDate) {
                    document.getElementById('applicationDate').textContent = 
                        new Date(applicationData.applicationDate).toLocaleDateString();
                }
                return;
            }
        }

        // Load user data and show form
        await loadUserData();
        document.getElementById('loadingSpinner').style.display = 'none';
        document.getElementById('instructorApplicationForm').style.display = 'block';
        
        setupFormValidation();

    } catch (error) {
        console.error('Error initializing application form:', error);
        document.getElementById('loadingSpinner').style.display = 'none';
        document.getElementById('loginRequired').style.display = 'block';
    }
}

async function loadUserData() {
    try {
        const userResponse = await fetch('/api/user/profile', { 
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (userResponse.ok) {
            const userData = await userResponse.json();
            document.getElementById('firstName').value = userData.firstName || '';
            document.getElementById('lastName').value = userData.lastName || '';
            document.getElementById('email').value = userData.email || '';
        } else {
            // Fallback to empty values if API fails
            document.getElementById('firstName').value = '';
            document.getElementById('lastName').value = '';
            document.getElementById('email').value = '';
        }
        
    } catch (error) {
        console.error('Error loading user data:', error);
        // Show form anyway with empty fields
        document.getElementById('firstName').value = '';
        document.getElementById('lastName').value = '';
        document.getElementById('email').value = '';
    }
}

function setupFormValidation() {
    // Character counters
    const textareas = [
        { id: 'experience', counterId: 'experienceCount' },
        { id: 'bio', counterId: 'bioCount' },
        { id: 'motivation', counterId: 'motivationCount' }
    ];
    
    textareas.forEach(({ id, counterId }) => {
        const textarea = document.getElementById(id);
        const counter = document.getElementById(counterId);
        
        textarea.addEventListener('input', () => {
            counter.textContent = textarea.value.length;
        });
    });

    // Form submission
    document.getElementById('instructorApplicationForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        await submitApplication();
    });
}

async function submitApplication() {
    const submitBtn = document.getElementById('submitBtn');
    const spinner = submitBtn.querySelector('.spinner-border');
    
    // Show loading state
    spinner.classList.remove('d-none');
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Submitting...';

    try {
        const formData = {
            phoneNumber: document.getElementById('phoneNumber').value.trim(),
            expertise: document.getElementById('expertise').value.trim(),
            experience: document.getElementById('experience').value.trim(),
            bio: document.getElementById('bio').value.trim(),
            motivationReason: document.getElementById('motivation').value.trim()
        };

        console.log('Form data to submit:', formData);

        // Validate required fields
        if (!formData.expertise || !formData.experience || !formData.bio || !formData.motivationReason) {
            throw new Error('Please fill in all required fields.');
        }

        console.log('Making API call to submit application...');

        const response = await fetch('/api/instructor-application/submit', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin',
            body: JSON.stringify(formData)
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers);

        if (response.ok) {
            const responseData = await response.json();
            console.log('Success response:', responseData);
            showSuccessMessage();
        } else {
            const errorText = await response.text();
            console.error('Error response:', response.status, errorText);
            throw new Error(`Server error (${response.status}): ${errorText || 'Failed to submit application'}`);
        }

    } catch (error) {
        console.error('Error submitting application:', error);
        showErrorMessage(error.message);
    } finally {
        // Reset button state
        spinner.classList.add('d-none');
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Submit Application';
    }
}

function showSuccessMessage() {
    // Hide form and show success message
    document.getElementById('instructorApplicationForm').style.display = 'none';
    
    const successHtml = `
        <div class="text-center py-4">
            <i class="bi bi-check-circle display-4 text-success mb-3"></i>
            <h5 class="text-success">Application Submitted Successfully!</h5>
            <p class="text-muted">Thank you for applying to become a TongueSpace instructor.</p>
            <div class="alert alert-info mt-3">
                <strong>What's next?</strong>
                <ul class="mb-0 text-start">
                    <li>We'll review your application within 2-3 business days</li>
                    <li>Our team will contact you via email or WhatsApp</li>
                    <li>You'll receive an email confirmation shortly</li>
                </ul>
            </div>
            <div class="mt-3">
                <a href="/" class="btn btn-primary">Back to Home</a>
            </div>
        </div>
    `;
    
    document.querySelector('.card-body').innerHTML = successHtml;
}

function showErrorMessage(message) {
    const errorAlert = document.createElement('div');
    errorAlert.className = 'alert alert-danger alert-dismissible fade show mt-3';
    errorAlert.innerHTML = `
        <i class="bi bi-exclamation-triangle me-2"></i>
        <strong>Error:</strong> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    // Remove existing alerts
    document.querySelectorAll('.alert-danger').forEach(alert => alert.remove());
    
    // Add new alert before form
    const form = document.getElementById('instructorApplicationForm');
    form.insertBefore(errorAlert, form.firstChild);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (errorAlert.parentNode) {
            errorAlert.remove();
        }
    }, 5000);
}
</script>
}

<!-- Add CSRF token for forms -->
@Html.AntiForgeryToken()