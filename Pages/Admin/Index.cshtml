@* Pages/Admin/Index.cshtml *@
@page "/admin"
@model CoursePLatform.Pages.Admin.IndexModel
@{
    ViewData["Title"] = "Admin Dashboard - TongueSpace";
    Layout = "_Layout";
}

<style>
    .admin-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
    
    .stats-card {
        border-radius: 12px;
        transition: transform 0.2s ease;
        cursor: pointer;
    }
    
    .stats-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .application-card {
        border-radius: 12px;
        transition: all 0.3s ease;
        border-left: 4px solid #e9ecef;
    }
    
    .application-card.pending { border-left-color: #ffc107; }
    .application-card.underreview { border-left-color: #17a2b8; }
    .application-card.approved { border-left-color: #28a745; }
    .application-card.rejected { border-left-color: #dc3545; }
    
    .application-card:hover {
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }
    
    .user-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(45deg, #667eea, #764ba2);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 18px;
    }
    
    .filter-btn {
        border-radius: 20px;
        margin: 2px;
        transition: all 0.3s ease;
    }
    
    .filter-btn.active {
        background: #667eea;
        border-color: #667eea;
        color: white;
    }
    
    .action-btn {
        border-radius: 20px;
        padding: 0.375rem 1rem;
        font-size: 0.875rem;
    }
    
    .admin-container {
        background: #f8f9fa;
        min-height: calc(100vh - 60px);
    }
</style>

<div id="loadingSpinner" class="text-center py-5">
    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
        <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-3">Loading admin panel...</p>
</div>

<div id="accessDenied" class="container mt-5 text-center" style="display: none;">
    <i class="bi bi-shield-exclamation display-1 text-danger mb-3"></i>
    <h2>Access Denied</h2>
    <p class="text-muted">You don't have administrator privileges to access this page.</p>
    <a href="/" class="btn btn-primary">
        <i class="bi bi-house me-1"></i>Go Home
    </a>
</div>

<div id="adminPanel" class="admin-container" style="display: none;">
    <!-- Header -->
    <div class="admin-header py-3 mb-4">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0">
                    <i class="bi bi-shield-check me-2"></i>TongueSpace Admin Panel
                </h2>
                <div>
                    <span class="me-3">Welcome, Admin!</span>
                    <a href="/" class="btn btn-outline-light btn-sm me-2">
                        <i class="bi bi-house me-1"></i>Back to Site
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <!-- Stats Overview -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card stats-card border-warning h-100" onclick="filterApplications('pending')">
                    <div class="card-body text-center">
                        <i class="bi bi-clock-history display-4 text-warning mb-2"></i>
                        <h3 class="fw-bold mb-1" id="pendingCount">-</h3>
                        <p class="text-muted mb-0">Pending Review</p>
                        <small class="text-muted">Click to filter</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card stats-card border-info h-100" onclick="filterApplications('underreview')">
                    <div class="card-body text-center">
                        <i class="bi bi-eye display-4 text-info mb-2"></i>
                        <h3 class="fw-bold mb-1" id="reviewCount">-</h3>
                        <p class="text-muted mb-0">Under Review</p>
                        <small class="text-muted">Click to filter</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card stats-card border-success h-100" onclick="filterApplications('approved')">
                    <div class="card-body text-center">
                        <i class="bi bi-check-circle display-4 text-success mb-2"></i>
                        <h3 class="fw-bold mb-1" id="approvedCount">-</h3>
                        <p class="text-muted mb-0">Approved</p>
                        <small class="text-muted">Click to filter</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card stats-card border-danger h-100" onclick="filterApplications('rejected')">
                    <div class="card-body text-center">
                        <i class="bi bi-x-circle display-4 text-danger mb-2"></i>
                        <h3 class="fw-bold mb-1" id="rejectedCount">-</h3>
                        <p class="text-muted mb-0">Rejected</p>
                        <small class="text-muted">Click to filter</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-9">
                <!-- Filters and Search -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="d-flex flex-wrap align-items-center justify-content-between">
                            <div class="filter-buttons mb-2 mb-md-0">
                                <button class="btn btn-outline-secondary filter-btn active" onclick="filterApplications('all')" id="filter-all">
                                    All <span class="badge bg-secondary ms-1" id="badge-all">0</span>
                                </button>
                                <button class="btn btn-outline-warning filter-btn" onclick="filterApplications('pending')" id="filter-pending">
                                    Pending <span class="badge bg-warning ms-1" id="badge-pending">0</span>
                                </button>
                                <button class="btn btn-outline-info filter-btn" onclick="filterApplications('underreview')" id="filter-underreview">
                                    Under Review <span class="badge bg-info ms-1" id="badge-underreview">0</span>
                                </button>
                                <button class="btn btn-outline-success filter-btn" onclick="filterApplications('approved')" id="filter-approved">
                                    Approved <span class="badge bg-success ms-1" id="badge-approved">0</span>
                                </button>
                                <button class="btn btn-outline-danger filter-btn" onclick="filterApplications('rejected')" id="filter-rejected">
                                    Rejected <span class="badge bg-danger ms-1" id="badge-rejected">0</span>
                                </button>
                            </div>
                            <div class="search-box">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Search applications..." 
                                           id="searchInput" onkeyup="debounceSearch(this.value)">
                                    <button class="btn btn-outline-secondary" type="button" onclick="clearSearch()">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Quick Actions -->
                        <div class="mt-3 pt-3 border-top">
                            <div class="d-flex flex-wrap gap-2">
                                <button class="btn btn-warning btn-sm" onclick="bulkApproveApplications()">
                                    <i class="bi bi-check-all me-1"></i>Bulk Approve Pending
                                </button>
                                <button class="btn btn-info btn-sm" onclick="exportApplicationData()">
                                    <i class="bi bi-download me-1"></i>Export CSV
                                </button>
                                <button class="btn btn-outline-primary btn-sm" onclick="refreshData()">
                                    <i class="bi bi-arrow-clockwise me-1"></i>Refresh
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="debugApplications()">
                                    <i class="bi bi-bug me-1"></i>Debug
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Applications List -->
                <div id="applications-list">
                    <div class="text-center py-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading applications...</span>
                        </div>
                    </div>
                </div>

                <!-- Pagination -->
                <div id="pagination" class="d-flex justify-content-center mt-4" style="display: none;">
                    <!-- Pagination will be inserted here -->
                </div>
            </div>

            <!-- Activity Sidebar -->
            <div class="col-lg-3">
                <div class="position-sticky" style="top: 20px;">
                    <div class="card mb-3">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0">
                                <i class="bi bi-activity me-2"></i>Quick Stats
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>Total Applications:</span>
                                <span class="fw-bold" id="totalApplications">-</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>This Week:</span>
                                <span class="fw-bold text-success" id="thisWeekCount">-</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Approval Rate:</span>
                                <span class="fw-bold text-info" id="approvalRate">-</span>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header bg-success text-white">
                            <h6 class="mb-0">
                                <i class="bi bi-list-check me-2"></i>Recent Actions
                            </h6>
                        </div>
                        <div class="card-body">
                            <div id="recentActivity" class="small">
                                <p class="text-muted text-center">No recent activity</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Application Details Modal -->
<div class="modal fade" id="applicationModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header admin-header">
                <h5 class="modal-title">
                    <i class="bi bi-person-lines-fill me-2"></i>Application Details
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="applicationDetails">
                    <div class="text-center py-4">
                        <div class="spinner-border" role="status"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x me-1"></i>Close
                </button>
                <button type="button" class="btn btn-success" onclick="approveFromModal()" id="approveBtn">
                    <i class="bi bi-check me-1"></i>Approve
                </button>
                <button type="button" class="btn btn-info" onclick="setUnderReviewFromModal()" id="reviewBtn">
                    <i class="bi bi-eye-fill me-1"></i>Under Review
                </button>
                <button type="button" class="btn btn-danger" onclick="rejectFromModal()" id="rejectBtn">
                    <i class="bi bi-x me-1"></i>Reject
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="bi bi-x-circle me-2"></i>Reject Application
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="rejectionForm">
                    <div class="mb-3">
                        <label class="form-label">Reason for rejection *</label>
                        <select class="form-select" id="rejectionReason" required>
                            <option value="">Select a reason...</option>
                            <option value="insufficient-qualifications">Insufficient teaching qualifications</option>
                            <option value="incomplete-application">Incomplete application</option>
                            <option value="language-proficiency">Insufficient language proficiency</option>
                            <option value="inappropriate-content">Inappropriate content in application</option>
                            <option value="other">Other (specify below)</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Additional notes</label>
                        <textarea class="form-control" id="rejectionNotes" rows="3" 
                                  placeholder="Provide feedback for the applicant (this will be included in the rejection email)..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmRejection()" id="confirmRejectBtn">
                    <i class="bi bi-x me-1"></i>Reject Application
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let currentApplicationId = null;
    let currentFilter = 'all';
    let currentSearch = '';
    let searchTimeout = null;

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', async () => {
        await checkAdminAccess();
    });

    async function checkAdminAccess() {
        try {
            // Try to access admin endpoint to verify permissions
            const response = await fetch('/api/admin/stats', {
                credentials: 'same-origin',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.status === 401 || response.status === 403) {
                document.getElementById('loadingSpinner').style.display = 'none';
                document.getElementById('accessDenied').style.display = 'block';
                return;
            }
            
            if (response.ok) {
                document.getElementById('loadingSpinner').style.display = 'none';
                document.getElementById('adminPanel').style.display = 'block';
                await initializeAdminPanel();
            } else {
                throw new Error('Unexpected response status: ' + response.status);
            }
        } catch (error) {
            console.error('Error checking admin access:', error);
            document.getElementById('loadingSpinner').style.display = 'none';
            document.getElementById('accessDenied').style.display = 'block';
        }
    }

    async function initializeAdminPanel() {
        await Promise.all([
            loadApplications(),
            loadStats(),
            loadRecentActivity()
        ]);
    }

    async function loadStats() {
        try {
            const response = await fetch('/api/admin/stats', {
                credentials: 'same-origin'
            });
            
            if (response.ok) {
                const stats = await response.json();
                
                document.getElementById('pendingCount').textContent = stats.pending;
                document.getElementById('reviewCount').textContent = stats.underReview;
                document.getElementById('approvedCount').textContent = stats.approved;
                document.getElementById('rejectedCount').textContent = stats.rejected;
                
                // Update filter badges
                const total = stats.pending + stats.underReview + stats.approved + stats.rejected;
                document.getElementById('badge-all').textContent = total;
                document.getElementById('badge-pending').textContent = stats.pending;
                document.getElementById('badge-underreview').textContent = stats.underReview;
                document.getElementById('badge-approved').textContent = stats.approved;
                document.getElementById('badge-rejected').textContent = stats.rejected;
                
                // Update sidebar stats
                document.getElementById('totalApplications').textContent = total;
                
                // Calculate approval rate
                const approvedAndRejected = stats.approved + stats.rejected;
                const approvalRate = approvedAndRejected > 0 ? 
                    Math.round((stats.approved / approvedAndRejected) * 100) : 0;
                document.getElementById('approvalRate').textContent = approvalRate + '%';
            }
        } catch (error) {
            console.error('Error loading stats:', error);
        }
    }

    async function loadApplications(status = null, search = null) {
        try {
            console.log('Loading applications with status:', status, 'search:', search);
            
            const params = new URLSearchParams();
            if (status && status !== 'all') {
                // Convert underreview back to UnderReview for API
                const apiStatus = status === 'underreview' ? 'UnderReview' : 
                                status.charAt(0).toUpperCase() + status.slice(1);
                params.append('status', apiStatus);
            }
            if (search) params.append('search', search);
            params.append('pageSize', '50'); // Load more for better UX
            
            const url = `/api/admin/applications?${params}`;
            console.log('Fetching from URL:', url);
            
            const response = await fetch(url, {
                credentials: 'same-origin'
            });
            
            console.log('Applications API response status:', response.status);
            
            if (response.ok) {
                const data = await response.json();
                console.log('Applications data received:', data);
                renderApplications(data.applications);
            } else {
                const errorText = await response.text();
                console.error('Applications API error:', response.status, errorText);
                
                // Try debug endpoint instead
                console.log('Trying debug endpoint...');
                const debugResponse = await fetch('/api/debug/applications', {
                    credentials: 'same-origin'
                });
                
                if (debugResponse.ok) {
                    const debugData = await debugResponse.json();
                    console.log('Debug data received:', debugData);
                    renderApplications(debugData.applications);
                    showToast(`Debug mode: Found ${debugData.totalApplications} applications`, 'info');
                } else {
                    showToast('Error loading applications from both endpoints', 'danger');
                }
            }
        } catch (error) {
            console.error('Error loading applications:', error);
            showToast('Error loading applications: ' + error.message, 'danger');
        }
    }

    function renderApplications(applications) {
        const container = document.getElementById('applications-list');
        
        if (!container) {
            console.error('applications-list container not found');
            return;
        }
        
        if (applications.length === 0) {
            container.innerHTML = `
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-4 text-muted mb-3"></i>
                    <h5>No applications found</h5>
                    <p class="text-muted">No applications match your current filters.</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = '';
        
        applications.forEach(app => {
            // Convert numeric status to string
            const statusMap = {
                1: 'Pending',
                2: 'Approved', 
                3: 'Rejected',
                4: 'UnderReview'
            };
            
            const status = typeof app.status === 'number' ? statusMap[app.status] : app.status;
            const statusClass = status.toLowerCase().replace('underreview', 'underreview');
            const statusColor = getStatusColor(status);
            const initials = getInitials(app.userName || 'NA');
            const timeAgo = getTimeAgo(app.applicationDate);
            
            const card = document.createElement('div');
            card.className = `card application-card ${statusClass} mb-3`;
            card.dataset.status = statusClass;
            card.dataset.applicationId = app.id;
            
            card.innerHTML = `
                <div class="card-body">
                    <div class="d-flex align-items-start">
                        <div class="user-avatar me-3">${initials}</div>
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h5 class="mb-1">${app.userName || 'N/A'}</h5>
                                    <p class="text-muted mb-1">
                                        <i class="bi bi-envelope me-1"></i>${app.email || 'N/A'}
                                    </p>
                                    ${app.phoneNumber ? `
                                        <p class="text-muted mb-1">
                                            <i class="bi bi-telephone me-1"></i>${app.phoneNumber}
                                        </p>
                                    ` : ''}
                                    <small class="text-muted">
                                        <i class="bi bi-clock me-1"></i>Applied ${timeAgo}
                                    </small>
                                </div>
                                <span class="badge bg-${statusColor} fs-6">
                                    ${status === 'UnderReview' ? 'Under Review' : status}
                                </span>
                            </div>
                            <div class="mt-3">
                                <p class="mb-1">
                                    <strong>Expertise:</strong> 
                                    <span class="text-truncate d-inline-block" style="max-width: 400px;">${app.expertise || 'N/A'}</span>
                                </p>
                                <p class="mb-2">
                                    <strong>Experience:</strong> 
                                    <span class="text-truncate d-inline-block" style="max-width: 400px;">${app.experience || 'N/A'}</span>
                                </p>
                                <div class="action-buttons">
                                    <button class="btn btn-primary action-btn me-2" onclick="viewApplicationDetails(${app.id})">
                                        <i class="bi bi-eye me-1"></i>View Details
                                    </button>
                                    ${getActionButtons(app.id, status)}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            container.appendChild(card);
        });
        
        console.log(`Rendered ${applications.length} applications`);
    }

    function getActionButtons(id, status) {
        let buttons = '';
        
        if (status === 'Pending' || status === 'UnderReview') {
            buttons += `
                <button class="btn btn-success action-btn me-2" onclick="approveApplicationAPI(${id})">
                    <i class="bi bi-check me-1"></i>Approve
                </button>
            `;
        }
        
        if (status === 'Pending') {
            buttons += `
                <button class="btn btn-outline-info action-btn me-2" onclick="setUnderReviewAPI(${id})">
                    <i class="bi bi-eye-fill me-1"></i>Under Review
                </button>
            `;
        }
        
        if (status !== 'Rejected') {
            buttons += `
                <button class="btn btn-outline-danger action-btn me-2" onclick="rejectApplicationAPI(${id})">
                    <i class="bi bi-x me-1"></i>Reject
                </button>
            `;
        }
        
        if (status === 'Rejected') {
            buttons += `
                <button class="btn btn-outline-warning action-btn" onclick="reconsiderApplicationAPI(${id})">
                    <i class="bi bi-arrow-clockwise me-1"></i>Reconsider
                </button>
            `;
        }
        
        return buttons;
    }

    // Application actions
    async function viewApplicationDetails(id) {
        try {
            currentApplicationId = id;
            
            const response = await fetch(`/api/admin/applications/${id}`, {
                credentials: 'same-origin'
            });
            
            if (response.ok) {
                const app = await response.json();
                renderApplicationDetails(app);
                
                const modal = new bootstrap.Modal(document.getElementById('applicationModal'));
                modal.show();
            } else {
                showToast('Error loading application details', 'danger');
            }
        } catch (error) {
            console.error('Error loading application details:', error);
            showToast('Error loading application details', 'danger');
        }
    }

    function renderApplicationDetails(app) {
        const detailsHtml = `
            <div class="row">
                <div class="col-md-6">
                    <h6 class="text-primary mb-3">
                        <i class="bi bi-person me-2"></i>Personal Information
                    </h6>
                    <div class="info-group mb-3">
                        <strong>Full Name:</strong>
                        <p class="mb-1">${app.firstName} ${app.lastName}</p>
                    </div>
                    <div class="info-group mb-3">
                        <strong>Email:</strong>
                        <p class="mb-1">${app.email}</p>
                    </div>
                    <div class="info-group mb-3">
                        <strong>Phone Number:</strong>
                        <p class="mb-1">${app.phoneNumber || 'Not provided'}</p>
                    </div>
                    <div class="info-group mb-3">
                        <strong>Application Date:</strong>
                        <p class="mb-1">${new Date(app.applicationDate).toLocaleDateString()}</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <h6 class="text-primary mb-3">
                        <i class="bi bi-clipboard-check me-2"></i>Review Status
                    </h6>
                    <div class="mb-3">
                        <span class="badge bg-${getStatusColor(app.status)} fs-6">
                            ${app.status === 'UnderReview' ? 'Under Review' : app.status}
                        </span>
                    </div>
                    ${app.reviewedAt ? `
                        <div class="info-group mb-3">
                            <strong>Reviewed:</strong>
                            <p class="mb-1">${new Date(app.reviewedAt).toLocaleDateString()}</p>
                        </div>
                    ` : ''}
                    ${app.reviewNotes ? `
                        <div class="info-group mb-3">
                            <strong>Review Notes:</strong>
                            <p class="mb-1">${app.reviewNotes}</p>
                        </div>
                    ` : ''}
                </div>
            </div>
            
            <hr class="my-4">
            
            <div class="mb-4">
                <h6 class="text-primary mb-3">
                    <i class="bi bi-translate me-2"></i>Language Expertise
                </h6>
                <div class="bg-light p-3 rounded">
                    <p class="mb-0">${app.expertise}</p>
                </div>
            </div>
            
            <div class="mb-4">
                <h6 class="text-primary mb-3">
                    <i class="bi bi-mortarboard me-2"></i>Teaching Experience
                </h6>
                <div class="bg-light p-3 rounded">
                    <p class="mb-0">${app.experience}</p>
                </div>
            </div>
            
            <div class="mb-4">
                <h6 class="text-primary mb-3">
                    <i class="bi bi-person-hearts me-2"></i>About the Applicant
                </h6>
                <div class="bg-light p-3 rounded">
                    <p class="mb-0">${app.bio}</p>
                </div>
            </div>
            
            <div class="mb-4">
                <h6 class="text-primary mb-3">
                    <i class="bi bi-heart me-2"></i>Motivation to Teach
                </h6>
                <div class="bg-light p-3 rounded">
                    <p class="mb-0">${app.motivationReason}</p>
                </div>
            </div>
        `;

        document.getElementById('applicationDetails').innerHTML = detailsHtml;
        
        // Update modal buttons based on status
        updateModalButtons(app.status);
    }

    function updateModalButtons(status) {
        const approveBtn = document.getElementById('approveBtn');
        const reviewBtn = document.getElementById('reviewBtn');
        const rejectBtn = document.getElementById('rejectBtn');
        
        // Reset all buttons
        [approveBtn, reviewBtn, rejectBtn].forEach(btn => {
            btn.disabled = false;
            btn.style.display = 'inline-block';
        });
        
        if (status === 'Approved') {
            approveBtn.disabled = true;
            approveBtn.innerHTML = '<i class="bi bi-check me-1"></i>Already Approved';
            reviewBtn.style.display = 'none';
        } else if (status === 'Rejected') {
            rejectBtn.disabled = true;
            rejectBtn.innerHTML = '<i class="bi bi-x me-1"></i>Already Rejected';
            reviewBtn.style.display = 'none';
        } else if (status === 'UnderReview') {
            reviewBtn.disabled = true;
            reviewBtn.innerHTML = '<i class="bi bi-eye-fill me-1"></i>Currently Under Review';
        }
    }

    // API Integration Functions
    async function approveApplicationAPI(id) {
        if (confirm('Are you sure you want to approve this application? The user will be granted instructor access.')) {
            await updateApplicationStatus(id, 'approve', 'Application approved by admin');
        }
    }

    async function setUnderReviewAPI(id) {
        await updateApplicationStatus(id, 'review', 'Application moved to under review');
    }

    async function rejectApplicationAPI(id) {
        currentApplicationId = id;
        const modal = new bootstrap.Modal(document.getElementById('rejectionModal'));
        modal.show();
    }

    async function reconsiderApplicationAPI(id) {
        if (confirm('Move this application back to pending status for reconsideration?')) {
            await updateApplicationStatus(id, 'review', 'Application moved back to pending for reconsideration');
        }
    }

    async function updateApplicationStatus(id, action, notes = '') {
        try {
            const endpoint = action === 'approve' ? 'approve' : 
                           action === 'reject' ? 'reject' : 'review';
            
            const response = await fetch(`/api/admin/applications/${id}/${endpoint}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify({ notes })
            });
            
            if (response.ok) {
                const result = await response.json();
                showToast(result.message, action === 'approve' ? 'success' : 
                         action === 'reject' ? 'danger' : 'info');
                
                await Promise.all([
                    loadApplications(currentFilter, currentSearch),
                    loadStats(),
                    loadRecentActivity()
                ]);
            } else {
                const error = await response.text();
                showToast('Error updating application: ' + error, 'danger');
            }
        } catch (error) {
            console.error('Error updating application status:', error);
            showToast('Error updating application status', 'danger');
        }
    }

    async function confirmRejection() {
        const reason = document.getElementById('rejectionReason').value;
        const notes = document.getElementById('rejectionNotes').value;
        
        if (!reason) {
            showToast('Please select a reason for rejection', 'warning');
            return;
        }

        const confirmBtn = document.getElementById('confirmRejectBtn');
        const originalText = confirmBtn.innerHTML;
        confirmBtn.disabled = true;
        confirmBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Rejecting...';

        try {
            const response = await fetch(`/api/admin/applications/${currentApplicationId}/reject`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify({ 
                    reason: reason,
                    notes: notes 
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                showToast(result.message, 'success');
                
                // Close modal and reset form
                bootstrap.Modal.getInstance(document.getElementById('rejectionModal')).hide();
                document.getElementById('rejectionForm').reset();
                
                await Promise.all([
                    loadApplications(currentFilter, currentSearch),
                    loadStats(),
                    loadRecentActivity()
                ]);
            } else {
                showToast('Error rejecting application', 'danger');
            }
        } catch (error) {
            console.error('Error rejecting application:', error);
            showToast('Error rejecting application', 'danger');
        } finally {
            confirmBtn.disabled = false;
            confirmBtn.innerHTML = originalText;
        }
    }

    // Modal action functions
    function approveFromModal() {
        if (currentApplicationId) {
            bootstrap.Modal.getInstance(document.getElementById('applicationModal')).hide();
            approveApplicationAPI(currentApplicationId);
        }
    }

    function setUnderReviewFromModal() {
        if (currentApplicationId) {
            bootstrap.Modal.getInstance(document.getElementById('applicationModal')).hide();
            setUnderReviewAPI(currentApplicationId);
        }
    }

    function rejectFromModal() {
        if (currentApplicationId) {
            bootstrap.Modal.getInstance(document.getElementById('applicationModal')).hide();
            rejectApplicationAPI(currentApplicationId);
        }
    }

    // Filter and search functions
    function filterApplications(status) {
        currentFilter = status;
        
        // Update active filter button
        document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(`filter-${status}`).classList.add('active');
        
        loadApplications(status, currentSearch);
    }

    function debounceSearch(value) {
        currentSearch = value;
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            loadApplications(currentFilter, value);
        }, 500);
    }

    function clearSearch() {
        document.getElementById('searchInput').value = '';
        currentSearch = '';
        loadApplications(currentFilter, '');
    }

    // Bulk actions
    async function bulkApproveApplications() {
        const pendingApplications = document.querySelectorAll('.application-card[data-status="pending"]');
        
        if (pendingApplications.length === 0) {
            showToast('No pending applications to approve', 'info');
            return;
        }
        
        if (confirm(`Approve all ${pendingApplications.length} pending applications?`)) {
            const applicationIds = Array.from(pendingApplications)
                .map(card => parseInt(card.dataset.applicationId));
            
            try {
                const response = await fetch('/api/admin/applications/bulk-approve', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'same-origin',
                    body: JSON.stringify({ applicationIds })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showToast(result.message, 'success');
                    
                    await Promise.all([
                        loadApplications(currentFilter, currentSearch),
                        loadStats(),
                        loadRecentActivity()
                    ]);
                } else {
                    showToast('Error bulk approving applications', 'danger');
                }
            } catch (error) {
                console.error('Error bulk approving:', error);
                showToast('Error bulk approving applications', 'danger');
            }
        }
    }

    async function exportApplicationData() {
        try {
            const response = await fetch('/api/admin/applications?pageSize=1000', {
                credentials: 'same-origin'
            });
            
            if (response.ok) {
                const data = await response.json();
                downloadCSV(data.applications);
            } else {
                showToast('Error exporting data', 'danger');
            }
        } catch (error) {
            console.error('Error exporting data:', error);
            showToast('Error exporting data', 'danger');
        }
    }

    function downloadCSV(applications) {
        const headers = ['ID', 'Name', 'Email', 'Phone', 'Status', 'Application Date', 'Expertise', 'Experience'];
        const csvContent = [
            headers.join(','),
            ...applications.map(app => [
                app.id,
                `"${app.userName}"`,
                app.email,
                `"${app.phoneNumber || ''}"`,
                app.status,
                new Date(app.applicationDate).toLocaleDateString(),
                `"${app.expertise.replace(/"/g, '""')}"`,
                `"${app.experience.replace(/"/g, '""').substring(0, 100)}..."`
            ].join(','))
        ].join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `instructor-applications-${new Date().toISOString().split('T')[0]}.csv`;
        a.click();
        window.URL.revokeObjectURL(url);
        
        showToast('Application data exported successfully!', 'success');
    }

    async function refreshData() {
        showToast('Refreshing data...', 'info');
        await initializeAdminPanel();
    }

    async function loadRecentActivity() {
        // This would load recent admin actions from the API
        // For now, we'll show a placeholder
        document.getElementById('thisWeekCount').textContent = '12';
        
        const activityHtml = `
            <div class="d-flex align-items-center mb-2">
                <i class="bi bi-check-circle text-success me-2"></i>
                <span>Application approved</span>
            </div>
            <div class="d-flex align-items-center mb-2">
                <i class="bi bi-file-plus text-primary me-2"></i>
                <span>New application received</span>
            </div>
            <div class="d-flex align-items-center">
                <i class="bi bi-eye text-info me-2"></i>
                <span>Application under review</span>
            </div>
        `;
        
        document.getElementById('recentActivity').innerHTML = activityHtml;
    }

    // Utility functions
    function getStatusColor(status) {
        const colors = {
            'Pending': 'warning',
            'UnderReview': 'info', 
            'Approved': 'success',
            'Rejected': 'danger',
            1: 'warning',  // Pending
            2: 'success',  // Approved
            3: 'danger',   // Rejected
            4: 'info'      // UnderReview
        };
        return colors[status] || 'secondary';
    }

    function getInitials(name) {
        return name.split(' ')
            .map(n => n[0])
            .join('')
            .substring(0, 2)
            .toUpperCase() || 'NA';
    }

    function getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffTime = Math.abs(now - date);
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays === 0) return 'today';
        if (diffDays === 1) return '1 day ago';
        if (diffDays < 7) return `${diffDays} days ago`;
        if (diffDays < 30) return `${Math.floor(diffDays / 7)} week${Math.floor(diffDays / 7) > 1 ? 's' : ''} ago`;
        return `${Math.floor(diffDays / 30)} month${Math.floor(diffDays / 30) > 1 ? 's' : ''} ago`;
    }

    function showToast(message, type = 'success') {
        // Remove existing toasts
        document.querySelectorAll('.toast-notification').forEach(toast => toast.remove());
        
        const toast = document.createElement('div');
        toast.className = `alert alert-${type} alert-dismissible fade show position-fixed toast-notification`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; max-width: 400px;';
        toast.innerHTML = `
            <i class="bi bi-${type === 'success' ? 'check-circle' : 
                              type === 'danger' ? 'exclamation-triangle' : 
                              type === 'warning' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }

    async function debugApplications() {
        try {
            console.log('=== DEBUG APPLICATIONS ===');
            
            // Check database
            const dbResponse = await fetch('/api/debug/check-database', {
                credentials: 'same-origin'
            });
            
            if (dbResponse.ok) {
                const dbData = await dbResponse.json();
                console.log('Database check:', dbData);
                showToast(`Database: ${dbData.totalApplications} applications, ${dbData.totalUsers} users`, 'info');
            }
            
            // Get all applications
            const appsResponse = await fetch('/api/debug/applications', {
                credentials: 'same-origin'
            });
            
            if (appsResponse.ok) {
                const appsData = await appsResponse.json();
                console.log('All applications:', appsData);
                
                if (appsData.applications.length === 0) {
                    // Create test application
                    const testResponse = await fetch('/api/debug/create-test-application', {
                        method: 'POST',
                        credentials: 'same-origin'
                    });
                    
                    if (testResponse.ok) {
                        const testData = await testResponse.json();
                        console.log('Test application created:', testData);
                        showToast('Test application created! Refreshing...', 'success');
                        await loadApplications();
                    }
                } else {
                    renderApplications(appsData.applications);
                    showToast(`Debug: Found ${appsData.applications.length} applications`, 'success');
                }
            }
            
        } catch (error) {
            console.error('Debug error:', error);
            showToast('Debug failed: ' + error.message, 'danger');
        }
    }
</script>
}

@* Additional CSS for better styling *@
<style>
    .info-group strong {
        color: #495057;
        font-size: 0.9rem;
    }
    
    .info-group p {
        font-size: 1rem;
        color: #212529;
    }
    
    .bg-light {
        background-color: #f8f9fa !important;
    }
    
    .text-truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    .action-buttons {
        border-top: 1px solid #e9ecef;
        padding-top: 1rem;
        margin-top: 1rem;
    }
    
    .toast-notification {
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        border: none;
    }
</style>